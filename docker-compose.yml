version: '3.4'
services: 

  postgres:
    env_file: .env
    container_name: 'postgres'
    image: postgres
    volumes: 
      - db_data:/var/lib/postgresql/data
    networks: 
      private_network:
        ipv4_address: 172.25.0.2

  pg-admin:
    env_file: .env
    container_name: 'pgadmin'
    image: dpage/pgadmin4:latest
    ports: 
      - 8088:80
    networks: 
      private_network:
        ipv4_address: 172.25.0.3

  backend:
    container_name: 'birds'
    # user: ${CURRENT_UID}
    env_file: .env
    build:
      context: ./backend
      args:
        - DEBUG=${DEBUG}
      target: deploy
    image: backend_image
    volumes: 
      - ./backend:/app/
      - ./static:/app/static
      - ./media:/app/media
    depends_on: 
      - postgres
    networks: 
      private_network:
        ipv4_address: 172.25.0.4

  frontend:
    container_name: 'node'
    # user: ${CURRENT_UID}
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app/
    working_dir: /app/
    restart: on-failure
    depends_on:
      - backend
    networks:
      private_network:
        ipv4_address: 172.25.0.5

  nginx:
    container_name: 'nginx'
    image: nginx:1.17-alpine
    restart: on-failure
    ports:
      - 80:80
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf:ro
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      - backend
      - frontend
    networks:
      private_network:
        ipv4_address: 172.25.0.6

  qcluster:
    image: backend_image
    container_name: 'qcluster'
    env_file: .env
    # user: ${CURRENT_UID}
    volumes:
      - ./backend/:/app/
      - ./media:/app/media
    working_dir: /app/
    restart: on-failure
    entrypoint: python3
    command: ./manage.py qcluster
    depends_on:
      - backend
      - postgres
    networks:
      private_network:
        ipv4_address: 172.25.0.7

networks: 
  private_network:
    ipam: 
      driver: default
      config: 
        - subnet: 172.25.0.0/16

volumes:
  db_data:
